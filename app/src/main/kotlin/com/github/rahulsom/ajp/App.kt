/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.github.rahulsom.ajp

import com.google.gson.Gson
import com.google.inject.AbstractModule
import com.google.inject.Guice
import org.slf4j.LoggerFactory
import java.io.File
import javax.inject.Inject

class AppModule : AbstractModule() {
  override fun configure() {
    install(JenkinsModule())
    install(MavenCentralModule())
    install(ConfigModule())
    install(ReportModule())
  }
}

class App @Inject constructor(
  private val jenkinsUpdateCenterApi: PluginProvider,
  private val downloadManager: DownloadManager,
  private val reportWriter: ReportWriter,
  private val pluginAnalyzer: PluginAnalyzer,
  private val mavenCentralApi: MavenCentralApi,
  private val config: AppConfig
) {
  val logger = LoggerFactory.getLogger(App::class.java)
  fun run() {
    val plugins = jenkinsUpdateCenterApi.getPlugins()
    plugins.mapIndexed { index, plugin -> Pair(index, plugin) }
      .parallelStream()
      .map { (index, plugin) -> Triple(index, plugin, downloadManager.download(plugin)) }
      .flatMap { (_, plugin, hpiFile) -> pluginAnalyzer.analyze(plugin, hpiFile) }
      .flatMap { it.stream() }
      .sequential()
      .map {
        when {
          it.jarArtifactId != null -> it // Ideal case
          else -> addGAV(it)
        }
      }
      .forEach { reportWriter.write(it) }
    reportWriter.close()
  }

  private fun addGAV(it: Manifest): Manifest {
    File("${config.rootDir}/mvn-cache").mkdirs()
    val cacheFile = File("${config.rootDir}/mvn-cache/${it.jarSha1}.json")
    if (!cacheFile.exists()) {
      val body = mavenCentralApi.search("1:\"${it.jarSha1}\"").execute().body() ?: return it.copy(jarGAVSource = null)
      if (body.response.numFound != 1) {
        return it.copy(jarGAVSource = null)
      }
      cacheFile.writeText(Gson().toJson(body))
      logger.debug("Caching for ${it.jarName}")
    } else {
      logger.debug("Reusing cache for ${it.jarName}")
    }
    val body = Gson().fromJson(cacheFile.readText(), SearchResponse::class.java)
    val docs = body.response.docs
    return it.copy(
      jarArtifactId = docs[0].a,
      jarVersion = docs[0].v,
      jarGroupId = docs[0].g,
      jarGAVSource = GAVSource.SHA1
    )
  }
}

fun main() {
  Guice.createInjector(AppModule()).getInstance(App::class.java).run()
}
